ENUNCIADO:
Una empresa ferretera quiere poner al día sus datos, ya que ahora mismo los tiene en una cajita de madera. La empresa
tiene varios empleados, de los cuales se guarda la siguiente información: dni, nombre, edad, tienda a la que pertenece, fecha de
incorporación a la empresa, cargo, cuota que debe cubrir y ventas que ha alcanzado. Un empleado puede ser jefe de otros
empleados. Un empleado solo tendrá como máximo un jefe y una oficina asignada.
De cada oficina se tiene la información de la ciudad donde se encuentra, un identificador de oficina, los objetivos marcados
y las ventas conseguidas.
Los clientes que acuden a la ferretería van a realizar pedidos, que se identifican por el número de pedido. A su vez, un
pedido contendrá una serie de productos que el cliente seleccionará y una fecha de realización asociada.
De los clientes interesa conocer su nombre, su número de cliente, así como qué empleado le tomó el pedido. Un cliente
puede ser asesorado por un empleados en cada pedido.
Cada producto lo identificaremos por su identificador de fabricante y su identificador de producto, tendrá asociado un
precio y la cantidad de existencias de las que se dispone del mismo. Un cliente podrá seleccionar un producto, pero tendrá la
opción de no incorporarlo a un pedido.
Además, cada cliente que esté dado de alta en la empresa, tendrá un límite de crédito disponible para gastar al mes.
Ayuda a la empresa ferretera a genera una base de datos con la que pueda gestionar toda esta información.
Comienza realizando un modelo E/R, después realiza el modelo relacional, y por último impleméntalo en SQL.

Entidades y atributos de las entidades (con sus claves primarias):
Empleado(dni, nombre, edad, tienda, fecha_incorporacion, cargo, cuota, ventas, jefe).
(jefe como atributo ya q solo puede tener uno)
Oficina(ciudad, id_oficina, objetivo, ventas).
Pedido(num_pedido, fecha_realizacion).
Cliente(nombre, id_cliente, lim_credito).
Producto(id_fab,id_prod, precio, cantidad).

Relaciones con cardinalidad y obligatoriedad:
Empleado trabaja oficina(1:N / oblig, oblig)
Cliente realiza pedido (1:N opc,oblig)
Empleado emite pedido (1:N opc, oblig)
Cliente asesorado empleado (N:M opc, opc)
cliente selecciona producto (N:M opc, opc)
Pedido incluye Producto (N:M oblig, opc).
MODELO RELACIONAL.
2 Empleado(dni, nombre, edad, tienda, fecha_incorporacion, cargo, cuota, ventas, jefe, ID_OFICINA).
Todo not null en empleado.
1 Oficina(ciudad, id_oficina, objetivo, ventas).
2 Pedido(num_pedido, fecha_realizacion not null, ID_CLIENTE, id_empleado).
1 Cliente(nombre not null, id_cliente, lim_credito).
1 Producto(id_fab,id_prod, precio not null, cantidad).
3 Asesora(ID_CLIENTE, DNI).
3 Selecciona(ID_CLIENTE, ID_FAB, ID_PROD).
3 Incluye(NUM_PEDIDO, ID_FAB, ID_PROD).


NORMALIZACIÓN: 
1FN: si pq todos los atributos son atómicos y todas las tablas tiene pk
2FN: esta en 1fn y todas las tablas sus atributos dependen completamente de sus pk
3FN: esta en 2FN y no hay transitividad entre columnas no pk

create database ferreteria;

create table oficina ( ciudad varchar(30) not null, id_oficina int not null, objetivo int, ventas int, constraint pk_oficina primary key (id_oficina) );

create table producto ( id_fab int not null, id_prod int not null, precio int not null, cantidad int, constraint pk_producto primary key (id_fab,id_prod) );

create table empleado ( dni int not null, nombre varchar(30) not null, edad int not null, tienda varchar(30) not null, fecha_incorporacion date not null, cargo varchar(30) not null, cuota int not null, ventas int not null, jefe varchar(30) not null, id_oficina int not null, constraint pk_empleado primary key (dni), constraint fk_oficina foreign key (id_oficina) references oficina(id_oficina) );

create table pedido ( num_pedido int not null, fecha_realizacion date not null, id_cliente int not null, id_empleado int not null, constraint pk_pedido primary key (num_pedido), constraint fk_cliente foreign key (id_cliente) references cliente(id_cliente), constraint fk_empleado foreign key (id_empleado) references empleado(dni) );

create table asesora( id_cliente int not null, id_empleado int not null, constraint fk_cliases foreign key (id_cliente) references cliente(id_cliente), constraint fk_empases foreign key (id_empleado) references empleado(dni), constraint pk_asesora primary key (id_cliente,id_empleado) );

create table selecciona( id_cli int not null, id_fab int not null, id_prod int not null, constraint fk_cliselec foreign key (id_cli) references cliente(id_cliente), constraint fk_prodselec foreign key (id_fab,id_prod) references producto(id_fab,id_prod), constraint pk_selecciona primary key (id_cli,id_fab,id_prod) );

create table incluye( num_pedido int not null, id_fab int not null, id_prod int not null, constraint fk_pedincl foreign key (num_pedido) references pedido(num_pedido), constraint fk_prodincl foreign key (id_fab,id_prod) references producto(id_fab,id_prod), constraint pk_selecciona primary key (num_pedido,id_fab,id_prod) );


insert into cliente (id_cliente, nombre, lim_credito) values (1,"Pedro Ramirez", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (2,"Rocio Porras", 2000);
insert into cliente (id_cliente, nombre, lim_credito) values (3,"Andres Ruiz", 6000);
insert into cliente (id_cliente, nombre, lim_credito) values (4,"Maria Gonzalez", 4000);
insert into cliente (id_cliente, nombre, lim_credito) values (5,"Sergio Perez", 2000);
insert into cliente (id_cliente, nombre, lim_credito) values (6,"Luisa Carranza", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (7,"Santiago Abascal", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (8,"Ramon Fernandez", 4000);
insert into cliente (id_cliente, nombre, lim_credito) values (9,"Manuel Ronaldo", 6000);
insert into cliente (id_cliente, nombre, lim_credito) values (10,"Vinicius", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (11,"Hamilton", 5000);
insert into cliente (id_cliente, nombre, lim_credito) values (12,"Messi", 2000);
insert into cliente (id_cliente, nombre, lim_credito) values (13,"Pau Gasol", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (14,"Dani Alves", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (15,"Pedro Sanchez", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (16,"Jennifer Lopez", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (17,"Pamela Langer", 2000);
insert into cliente (id_cliente, nombre, lim_credito) values (18,"Albert Einstein", 1000);
insert into cliente (id_cliente, nombre, lim_credito) values (19,"Dani deVito", 5000);
insert into cliente (id_cliente, nombre, lim_credito) values (20,"Ana de Armas", 1000);

# mostrar el nombre e id_cliente de los diez primeros clientes.
select nombre, id_cliente from cliente where (id_cliente<11);

# lista de clientes por orden alfabético de la a a la z.
select * from cliente order by nombre;

# mostrar los clientes ordenados por limite de credito de menor a mayor y alfabeticamente después:
select * from cliente order by lim_credito, nombre;

# mostrar los clientes ordenados por limite de credito de mayor a menor y alfabeticamente (de la a a la z) después:
select * from cliente order by lim_credito DESC, nombre ASC;

# quiero saber cuantos clientes tienen limite de credito menor que 2000.
select count(id_cliente) from cliente where (lim_credito<2000);

# cuantos clientes empiezan por la letra R.
select count(*) as clientesEmpPorR from cliente WHERE nombre like "R%";

# mostrar lim_credito de grupos de clientes con el mismo limite de credito.
select lim_credito from cliente GROUP BY lim_credito;

# agrupar los clientes en grupos de lim de credito que tengan al menos 4 clientes
select lim_credito from cliente GROUP BY lim_credito HAVING (count(*)>=4);
